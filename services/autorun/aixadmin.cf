bundle agent aixadmin_users_groups
{
meta:
 "tags" slist => { "autorun", };

vars:
 aix::
  "aixadmin_groups" data => parsejson('{
   "aixadmin": { "gid": 1000 },
  }'), meta => { "glidm", "aixadmingroups" }, policy => "free";
  
  "aixadmin_users" data => parsejson('{
   "rcox": { "uid": "1000", "gecos": "Administrative account for Raymond Cox", "home": "/home/rcox", "pgrp": "aixadmin", "grps": ["aixadmin"] },
  }'), meta => { "ulidm", "aixadminusers" }, policy => "free";

 
 "groups" slist => variablesmatching(".*","aixadmingroups");
 "users"  slist => variablesmatching(".*","aixadminusers");

methods:
 aix::
  "lidm_groups" usebundle => lidm_group_add("@(groups)");
  "lidm_users"  usebundle => lidm_user_add("@(users)");
}

#=======================================================================
# agent lidm
# -------------
#   Searches for any variables that have a meta tag of ulidm or glidm and merge them into 
#   two local variables containing a list of users and groups to create on the server.
#   --------------------------------------------------------------------
#   Expects JSON data variables with meta tags of ulidm (Users) and glidm (Groups)
#   These entries are designed to reside in the application definitions. 
#   For example the rms bundle has all users required to make that application work.
#   --------------------------------------------------------------------
#   Calls two methods:
#      _ga: group add
#      _ua: user add
#-----------------------------------------------------------------------

bundle agent lidm_group_add(grouplist)
{
vars:
 aix::
  "groups" data => parsejson('[]'), policy => "free";
  "groups" data => mergedata(groups, $(grouplist)), policy => "free";
  "gidx"  slist => getindices("groups");
  
classes:
 aix::
  "add_$(gidx)" not => groupexists("$(gidx)");
  "$(gidx)_exists" expression => groupexists("$(gidx)");

commands:
 aix::
  "/usr/bin/mkgroup"  args => "id=$(groups[$(gidx)][gid]) $(gidx)", ifvarclass => "add_$(gidx)";
}

bundle agent lidm_user_add(userlist)
{
vars:
 aix::
  "users" data => parsejson('[]'), policy => "free";
  "users" data => mergedata(users, $(userlist)), policy => "free";
  "uidx"  slist => getindices("users");
  
classes:
 aix::
  "add_$(uidx)" not => userexists("$(uidx)");
  "$(uidx)_exists" expression => userexists("$(uidx)");

commands:
 aix::
    "/usr/bin/mkuser pgrp=$(users[$(uidx)][pgrp]) gecos=\'$(users[$(uidx)][gecos])\' home=$(users[$(uidx)][home])  $(uidx)"
        ifvarclass => "add_$(uidx)",
        contain => in_shell;

    "/usr/bin/echo"
        args    => "$(uidx):inth3mud | /usr/bin/chpasswd",
        ifvarclass => "add_$(uidx)";

    "/usr/bin/pwdadm"
        args    => "-c $(uidx)",
        ifvarclass => "add_$(uidx)";

}
